name: Validate Inputs
# Read more on securing GitHub Action/Workflow inputs:
# https://securitylab.github.com/research/github-actions-untrusted-input/
# Read more on core annotations:
# https://github.com/actions/toolkit/tree/main/packages/core#annotations

on:
  # Allows you to reuse this workflow from other workflows
  workflow_call:
    inputs:
      defaultTeams:
        description: 'Comma-separated list of default teams'
        required: false
        default: org
        type: string  # Can be: [boolean,number,string]
      repoName:
        description: 'Repository Name'
        required: true
        type: string
      envName:
        description: 'Environment Name'
        required: true
        type: string
      templateRepo:
        description: 'Template repo to use'
        required: false
        type: string
      teams:
        description: 'Comma-separated list of teams'
        required: true
        default: org-admin
        type: string
      enableIssue:
        description: 'Enable Repo Issues?'
        required: true
        type: string
      enableProject:
        description: 'Enable Repo Projects?'
        required: true
        type: string
      enableSquashMerge:
        description: 'Enable Repo Squash Merging?'
        required: true
        type: string
      privateRepo:
        description: 'Make Repository Private?'
        required: true
        type: string
    secrets:
      app-issueops-pem:
        required: true
      app-issueops-id:
        required: true
    # Map the workflow outputs to job outputs
    outputs:
      params:
        description: "The formatted params as JSON"
        value: ${{ jobs.validate-inputs.outputs.params }}

jobs:
  # debug is used to help validate job inputs & vars
  debug:
    runs-on: ubuntu-latest
    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
        GITHUB_INPUTS: ${{ toJson(inputs) }}
      run: |
        echo "GITHUB_CONTEXT:"
        echo "$GITHUB_CONTEXT"
        echo "GITHUB_INPUTS:"
        echo "$GITHUB_INPUTS"
    - name: Print workflow inputs
      run: |
        echo "repoName: [${{ inputs.repoName }}]"
        echo "env: [${{ inputs.envName }}]"
        echo "templateRepo: [${{ inputs.templateRepo }}]"
        echo "teams: [${{ inputs.teams }}]"
        echo "enableIssue: [${{ inputs.enableIssue }}]"
        echo "enableProject: [${{ inputs.enableProject }}]"
        echo "enableSquashMerge: [${{ inputs.enableSquashMerge }}]"
        echo "privateRepo: [${{ inputs.privateRepo }}]"

  validate-inputs:
    runs-on: ubuntu-latest
    environment: ${{ inputs.envName }}
    outputs:
      params: ${{ steps.format-inputs.outputs.params }}
    steps:
      - name: Install @octokit/rest @octokit/auth-app tweetsodium
        run: |
          npm install @octokit/rest @octokit/auth-app tweetsodium
      - name: Get token using github-script
        id: get-token
        uses: actions/github-script@v5
        with:
          script: |
            // Login as GitHub App
            // https://octokit.github.io/rest.js/v18#authentication
            const { Octokit } = require("@octokit/rest");
            const { createAppAuth } = require("@octokit/auth-app");

            const appOctokit = new Octokit({
              authStrategy: createAppAuth,
              auth: {
                appId: '${{ secrets.app-issueops-id }}',
                privateKey: Buffer.from('${{ secrets.app-issueops-pem }}', 'base64').toString(),  // Base64 encoded secret
                // optional: this will make appOctokit authenticate as app (JWT)
                //           or installation (access token), depending on the request URL
                // installationId: '${{ secrets.app-issueops-install-id }}'
              }
            });
            const app_installation = await appOctokit.rest.apps.getRepoInstallation({
              owner: context.payload.organization.login,
              repo: context.payload.repository.name
            });
            const { token } = await appOctokit.auth({
              type: "installation",
              // defaults to `options.auth.installationId` set in the constructor
              installationId: app_installation.data.id
            });
            // core.setSecret(token)  // Not needed. Set by Octokit
            core.setOutput('app_token', token)

            // Revoke Access Token in POST-RUN job (#9)
            // github.rest.apps.revokeInstallationAccessToken();
      - name: Validate & Format Inputs
        id: format-inputs
        uses: actions/github-script@v5
        with:
          github-token: ${{ steps.get-token.outputs.app_token }}
          script: |
            // Set vars for this step
            let teamAccessOptions = ["admin", "maintain", "write", "triage", "read"]
            let defaultTeams = "${{ inputs.defaultTeams }}".trim().split(",").filter(e => e.trim())
            let repoName = "${{ inputs.repoName }}"
            let templateRepo = "${{ inputs.templateRepo }}"
            let teams = defaultTeams.concat("${{ inputs.teams }}".trim().split(",").filter(e => e.trim()))
            let enableIssue = ${{ inputs.enableIssue }}
            let enableProject = ${{ inputs.enableProject }}
            let enableSquashMerge = ${{ inputs.enableSquashMerge }}
            let privateRepo = ${{ inputs.privateRepo }}

            async function teamExists(teamSlug) {
              var exists = false
              await github.rest.teams.getByName({
                org: context.payload.organization.login,
                team_slug: teamSlug
              }).then((res) => {
                console.log(`Team [${teamSlug}] exists`)
                exists = true
              }).catch((err) => {
                core.startGroup(`Team: [${teamSlug}] does not exist`)
                console.log(err)
                core.endGroup()
              })
              return exists
            }

            async function adminTeamMember(teamSlug) {
              var member = false
              if (teamSlug.endsWith('-admin')) {
                await github.rest.teams.getMembershipForUserInOrg({
                  org: context.payload.organization.login,
                  team_slug: teamSlug,
                  username: context.payload.sender.login,
                }).then((res) => {
                  console.log(`[${context.payload.sender.login}] is a member of the [${teamSlug}] team`)
                  member = true
                }).catch((err) => {
                  core.startGroup(`Not a member of [${teamSlug}]`)
                  console.log(err)
                  core.endGroup()
                })
              }
              return member
            }

            function teamSlugs(team) {
              var teamSlug = team.trim().replace(/\s+/g, '-').toLowerCase()
              if (teamAccessOptions.some(e => teamSlug.endsWith(e))) {
                return teamSlug
              } else {
                return teamAccessOptions.map(e => teamSlug + '-' + e)
              }
            }

            // FORMAT STANDARDIZED TEAM SLUGS
            const slugs = teams.flatMap(e => teamSlugs(e))
            console.log(`Validating formatted team slugs: [${slugs}]`)

            // SENDER IS IN ADMIN TEAM
            var adminTeams = await Promise.all(slugs.map(e => adminTeamMember(e)))
            if (!adminTeams.some(e => e)) {
              core.setFailed(`User is not a member of any admin teams`)
            } else {
              core.notice(`Verified: User is a member of an admin team`)
            }

            // EACH TEAM EXISTS
            var existingTeams = await Promise.all(slugs.map(e => teamExists(e)))
            if (!existingTeams.every(e => e)) {
              core.setFailed(`Not all teams entered are valid`)
            } else {
              core.notice("Verified: All teams entered exist")

              // Setting formatted output params
              var params = {
                repoName: repoName,
                envName: context.payload.organization.login,
                templateRepo: templateRepo,
                teams: slugs,
                enableIssue: enableIssue,
                enableProject: enableProject,
                enableSquashMerge: enableSquashMerge,
                privateRepo: privateRepo
              }
              core.setOutput('params', JSON.stringify(params))

              // Setting ORG_TOKEN as env secret
              // https://docs.github.com/en/rest/reference/actions#create-or-update-an-environment-secret
              const sodium = require('tweetsodium')
              const pkey = await github.rest.actions.getEnvironmentPublicKey({
                repository_id: context.payload.repository.id,
                environment_name: params.envName,
              })
              const value = "${{ steps.get-token.outputs.app_token }}"
              core.setSecret(value)
              // Convert the message and public key to Uint8Array's (Buffer implements that interface)
              const messageBytes = Buffer.from(value)
              const keyBytes = Buffer.from(pkey.data.key, 'base64')
              // Encrypt using LibSodium.
              const encryptedBytes = sodium.seal(messageBytes, keyBytes)
              // Base64 the encrypted secret
              const encrypted = Buffer.from(encryptedBytes).toString('base64')
              await github.rest.actions.createOrUpdateEnvironmentSecret({
                repository_id: context.payload.repository.id,
                environment_name: params.envName,
                secret_name: "ORG_TOKEN",
                encrypted_value: encrypted,
                key_id: pkey.data.key_id
              }).then((res) => {
                console.log(`Successfully updated [ORG_TOKEN] secret in [${params.envName}] environment`)
              }).catch((err) => {
                core.startGroup(`Unable to update env secret`)
                core.setFailed(err)
                core.endGroup()
              })
            }