name: Configure repository

on:
  # Allows you to reuse this workflow from other workflows
  workflow_call:
    inputs:
      params:
        description: 'Input params as JSON'
        required: true
        type: string  # Can be: [boolean,number,string]
    secrets:
      caller-token:
        required: true

jobs:
  # debug is used to help validate job inputs & vars
  debug:
    runs-on: ubuntu-latest
    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
        GITHUB_INPUTS: ${{ toJson(inputs) }}
      run: |
        echo "GITHUB_CONTEXT:"
        echo "$GITHUB_CONTEXT"
        echo "GITHUB_INPUTS:"
        echo "$GITHUB_INPUTS"
    - name: Print workflow inputs
      run: |
        echo "${{ inputs.params }}"
        echo "repoName: [${{ fromJSON(inputs.params).repoName }}]"
        echo "env: [${{ fromJSON(inputs.params).envName }}]"
        echo "teams: [${{ toJSON(fromJSON(inputs.params).teams) }}]"
        echo "enableIssue: [${{ fromJSON(inputs.params).enableIssue }}]"
        echo "enableProject: [${{ fromJSON(inputs.params).enableProject }}]"
        echo "enableSquashMerge: [${{ fromJSON(inputs.params).enableSquashMerge }}]"

  configure-repo:
    runs-on: ubuntu-latest
    environment: ${{ fromJSON(inputs.params).envName }}
    steps:
      - name: Configure GitHub repo
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.caller-token }}
          script: |
            // Set vars for this step
            let repoName = "${{ fromJSON(inputs.params).repoName }}"
            let teamArray = "${{ join(fromJSON(inputs.params).teams,',') }}".split(',')
            let enableIssue = ${{ fromJSON(inputs.params).enableIssue }}
            let enableProject = ${{ fromJSON(inputs.params).enableProject }}
            let enableSquashMerge = ${{ fromJSON(inputs.params).enableSquashMerge }}

            // Print vars to the log
            console.log("Repo Name: " + repoName)
            console.log("Teams: " + JSON.stringify(teamArray))
            console.log("Enable Issue: " + enableIssue)
            console.log("Enable Project: " + enableProject)
            console.log("Allow Squash Merge: " + enableSquashMerge)
            
            console.log("Configuring repo")
            
            await github.rest.repos.update({
              owner: context.payload.organization.login,
              repo: repoName,
              has_issues: enableIssue,
              has_projects: enableProject,
              allow_squash_merge: enableSquashMerge
            }).then((res) => {
              console.log(`Repo updated`)
            }).catch((err) => {
              core.setFailed(`Action failed with error ${err}`)
            })
            
            console.log("Updating repo branch permissions")
            await github.rest.repos.updateBranchProtection({
              owner: context.payload.organization.login,
              repo: repoName,
              branch: 'main',
              required_status_checks: { "strict": true, "contexts": [] },
              enforce_admins: true,
              required_pull_request_reviews: {"dismissal_restrictions": {"users":[], "teams":[]}, "dismiss_stale_reviews": false, "require_code_owner_reviews": true, "required_approving_review_count": 1},
              restrictions : { "users": [], "teams": [], "apps": [] }
            }).then((res) => {
              console.log(`Repo branch permissions updated`)
            }).catch((err) => {
              core.setFailed(`Action failed with error ${err}`)
            })
            
            console.log("Setting repo permissions per team")
            for (const team of teamArray) {
              var permission = 'pull'
              if (team.includes('admin')) {
                permission = 'admin'
              } else if (team.includes('maintain')) {
                permission = 'maintain'
              } else if (team.includes('write')) {
                permission = 'push'
              } else if (team.includes('triage')) {
                permission = 'triage'
              }
              await github.rest.teams.addOrUpdateRepoPermissionsInOrg({
                org: context.payload.organization.login,
                owner: context.payload.organization.login,
                repo: repoName,
                team_slug: team,
                permission: permission
              }).then((res) => {
                core.startGroup(`Success: Add [${team}] team to repo with [${permission}] permission`)
                console.log(res)
                core.endGroup()
              }).catch((err) => {
                core.setFailed(`Failed to add [${team}] team to repo with [${permission}] permission. Output: ${err}`)
              })
            }
            
            console.log("Commenting on issue '" + context.payload.issue.title + "' - " + context.payload.issue.html_url)
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Thanks for creating a repo. Your new repo is available at: https://github.com/' + context.payload.organization.login + "/" + repoName
            }).then((res) => {
              core.startGroup(`Comment added to issue. Link: ${res.data.html_url}`)
              console.log(res)
              core.endGroup()
            }).catch((err) => {
              core.setFailed(`Action failed with error ${err}`)
            })
            
            console.log("Closing issue")
            await github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed'
            }).then((res) => {
              core.startGroup(`Issue closed. Link: ${res.data.html_url}`)
              console.log(res)
              core.endGroup()
            }).catch((err) => {
              core.setFailed(`Action failed with error ${err}`)
            })