name: Configure repository

on:
  # Allows you to reuse this workflow from other workflows
  workflow_call:
    inputs:
      params:
        description: 'Input params as JSON'
        required: true
        type: string  # Can be: [boolean,number,string]
    secrets:
      caller-token:
        required: true
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      repoName:
        description: 'Repository Name'
        required: true
      envName:
        description: 'Environment Name'
        required: true
      teams:
        description: 'Comma-separated list of team-slugs'
        required: true
        default: org-admin
      enableIssue:
        description: 'Enable Repo Issues?'
        required: true
      enableProject:
        description: 'Enable Repo Projects?'
        required: true
      enableSquashMerge:
        description: 'Enable Repo Squash Merging?'
        required: true
      enableForking:
        description: 'Enable Repo Forking?'
        required: true

jobs:
  # debug is used to help validate job inputs & vars
  debug:
    runs-on: ubuntu-latest
    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
        GITHUB_INPUTS: ${{ toJson(inputs) }}
      run: |
        echo "GITHUB_CONTEXT:"
        echo "$GITHUB_CONTEXT"
        echo "GITHUB_INPUTS:"
        echo "$GITHUB_INPUTS"
    - name: Print workflow inputs
      run: |
        echo "repoName: [${{ fromJSON(inputs.params).repoName }}]"
        echo "env: [${{ fromJSON(inputs.params).envName }}]"
        echo "teams: [${{ fromJSON(inputs.params).teams }}]"
        echo "enableIssue: [${{ fromJSON(inputs.params).enableIssue }}]"
        echo "enableProject: [${{ fromJSON(inputs.params).enableProject }}]"
        echo "enableSquashMerge: [${{ fromJSON(inputs.params).enableSquashMerge }}]"
        echo "enableForking: [${{ fromJSON(inputs.params).enableForking }}]"

  configure-repo:
    runs-on: ubuntu-latest
    environment: ${{ fromJSON(inputs.params).envName }}
    steps:
      - name: Configure GitHub repo
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.caller-token }}
          script: |
            // Set vars for this step
            let repoName = "${{ fromJSON(inputs.params).repoName }}"
            let teams = "${{ fromJSON(inputs.params).teams }}"
            let enableIssue = ${{ fromJSON(inputs.params).enableIssue }}
            let enableProject = ${{ fromJSON(inputs.params).enableProject }}
            let enableSquashMerge = ${{ fromJSON(inputs.params).enableSquashMerge }}
            let enableForking = ${{ fromJSON(inputs.params).enableForking }}
            // Print vars to the log
            console.log("Team: " + teams)
            console.log("Enable Issue: " + enableIssue)
            console.log("Enable Project: " + enableProject)
            console.log("Allow Squash Merge: " + enableSquashMerge)
            console.log("Allow Forking: " + enableForking)
            
            console.log("Configure repo: " + repoName + " Teams: " + teams)

            await github.rest.repos.update({
              owner: context.payload.organization.login,
              private: false,
              repo: repoName,
              has_issues: enableIssue,
              has_projects: enableProject,
              allow_squash_merge: enableSquashMerge
            }).then((res) => {
              console.log(`Repo updated.`)
            }).catch((err) => {
              core.setFailed(`Action failed with error ${err}`);
            })
            
            console.log("Updating repo branch permissions")
            await github.rest.repos.updateBranchProtection({
              "owner": context.payload.organization.login,
              "repo": repoName,
              "branch": 'main',
              "required_status_checks": { "strict": true, "contexts": [] },
              "enforce_admins": true,
              "required_pull_request_reviews": {"dismissal_restrictions": {"users":[], "teams":[]}, "dismiss_stale_reviews": false, "require_code_owner_reviews": true, "required_approving_review_count": 1},
              "restrictions" : { "users": [], "teams": [], "apps": [] }
            }).then((res) => {
              console.log(`Repo branch permissions updated.`)
            }).catch((err) => {
              core.setFailed(`Action failed with error ${err}`);
            })
            
            console.log("Setting Team repo permissions")
            for (const team of teams.split(",")) {
              var permission = 'pull'
              if (team.includes('admin')) {
                permission = 'admin'
              } else if (team.includes('maintain')) {
                permission = 'maintain'
              } else if (team.includes('write')) {
                permission = 'push'
              } else if (team.includes('triage')) {
                permission = 'triage'
              }
              console.log("Team: [" + team + "] - Permission: [" + permission + "]")
              await github.rest.teams.addOrUpdateRepoPermissionsInOrg({
                org: context.payload.organization.login,
                owner: context.payload.organization.login,
                repo: repoName,
                team_slug: team,
                permission: permission
              }).then((res) => {
                console.log(`Team added to repo.`)
              }).catch((err) => {
                core.setFailed(`Action failed with error ${err}`);
              })
            }
            
            console.log("Commenting on issue '" + context.payload.issue.title + "' - " + context.payload.issue.html_url)
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Thanks for creating a repo. Your new repo is available at: https://github.com/' + context.payload.organization.login + "/" + repoName
            }).then((res) => {
              console.log(`Comment added to issue. Link: ${res.html_url}`)
            }).catch((err) => {
              core.setFailed(`Action failed with error ${err}`);
            })
            
            console.log("Closing issue")
            await github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed'
            }).then((res) => {
              console.log(`Issue closed. Link: ${res.html_url}`)
            }).catch((err) => {
              core.setFailed(`Action failed with error ${err}`);
            })