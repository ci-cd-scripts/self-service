name: Create repository

on:
  # Allows you to reuse this workflow from other workflows
  workflow_call:
    inputs:
      params:
        description: 'Input params as JSON'
        required: true
        type: string  # Can be: [boolean,number,string]
      description:
        description: 'Repository description'
        required: false
        default: "Created via IssueOps"
        type: string
    secrets:
      caller-token:
        required: true

jobs:
  # debug is used to help validate job inputs & vars
  debug:
    runs-on: ubuntu-latest
    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
        GITHUB_INPUTS: ${{ toJson(inputs) }}
      run: |
        echo "GITHUB_CONTEXT:"
        echo "$GITHUB_CONTEXT"
        echo "GITHUB_INPUTS:"
        echo "$GITHUB_INPUTS"
    - name: Print workflow inputs
      run: |
        echo "org: [${{ fromJSON(inputs.params).envName }}]"
        echo "repoName: [${{ fromJSON(inputs.params).repoName }}]"
        echo "privateRepo: [${{ fromJSON(inputs.params).privateRepo }}]"

  create-repo:
    runs-on: ubuntu-latest
    environment: ${{ fromJSON(inputs.params).envName }}
    steps:
      - name: Configure GitHub repo
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.caller-token }}
          script: |
            // Set vars for this step
            let repoName = "${{ fromJSON(inputs.params).repoName }}"
            let templateRepo = "${{ fromJSON(inputs.params).templateRepo }}"
            let privateRepo = ${{ fromJSON(inputs.params).privateRepo }}
            // Print vars to the log
            console.log("Repo Name: " + repoName)
            console.log("Template Repository: " + templateRepo)     
            console.log("Private Repo: " + privateRepo)
       
            console.log("Creating repo from template")
            await github.rest.repos.createUsingTemplate({
              template_owner: context.payload.organization.login,
              template_repo: templateRepo,
              name: repoName,
              owner: context.payload.organization.login,
              description: "${{ inputs.description }}",
              include_all_branches: true,
              private: privateRepo
            }).then((res) => {
              console.log(`Repo created. Link: ${res.data.html_url}`)
            }).catch((err) => {
              core.setFailed(`Action failed with error ${err}`)
            })